name: Development
on:
  push:
  pull_request:
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - conda_ver: 4.9.0
            py_ver: 3.9
            distro: alpine
          - conda_ver: 4.8.3
            py_ver: 3.8
            distro: alpine
          - conda_ver: 4.8.3
            py_ver: 3.7
            distro: alpine
          - conda_ver: 4.5.4
            py_ver: 3.6
            distro: alpine
          - conda_ver: 4.9.0
            py_ver: 3.9
            distro: debian
          - conda_ver: 4.8.3
            py_ver: 3.8
            distro: debian
          - conda_ver: 4.8.3
            py_ver: 3.7
            distro: debian
          - conda_ver: 4.5.4
            py_ver: 3.6
            distro: debian
    env:
      CONDA_VER: ${{matrix.conda_ver}}
      PY_VER: ${{matrix.py_ver}}
      DISTRO: ${{matrix.distro}}
      DOCKER_CLIENT_TIMEOUT: "120"
      COMPOSE_HTTP_TIMEOUT: "120"
      HOST_UID: "1001"
      BASE_IMAGE_HASH: "7210574"
    steps:
      - uses: actions/checkout@v2
      - name: Compile image
        run: |
          docker-compose -f dist/${DISTRO}/docker-compose.yaml build
          IMAGE=$(docker images --filter "reference=datajoint/*" --format "{{.Repository}}")
          TAG=$(docker images --filter "reference=datajoint/*" --format "{{.Tag}}")
          docker save "${IMAGE}:${TAG}" | gzip > "py${PY_VER}-${DISTRO}.tar.gz"
      - name: Add image artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{format('py{1}-{2}', matrix.py_ver, matrix.distro)}}
          path: >
            ${{format('py{1}-{2}.tar.gz', matrix.py_ver, matrix.distro)}}
          retention-days: 1
  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - py_ver: 3.9
            distro: alpine
          - py_ver: 3.8
            distro: alpine
          - py_ver: 3.7
            distro: alpine
          - py_ver: 3.6
            distro: alpine
          - py_ver: 3.9
            distro: debian
          - py_ver: 3.8
            distro: debian
          - py_ver: 3.7
            distro: debian
          - py_ver: 3.6
            distro: debian
    env:
      PY_VER: ${{matrix.py_ver}}
      DISTRO: ${{matrix.distro}}
    steps:
      - name: Fetch image artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{format('py{1}-{2}', matrix.py_ver, matrix.distro)}}
      - name: Verify image
        run: |
          docker load < "py${PY_VER}-${DISTRO}.tar.gz"
          REF=$(docker images --filter "reference=datajoint/*" \
                --format "{{.Repository}}:{{.Tag}}")
          SHELL_CMD=$(docker inspect "$REF" --format '{{join .Config.Cmd " "}}')
          docker run --rm "$REF" $SHELL_CMD -c "python --version 2>&1" | grep "$PY_VER"
          docker run --rm "$REF" $SHELL_CMD -c "cat /etc/issue 2>&1" | grep -i "$DISTRO"
          docker run --rm "$REF" $SHELL_CMD -c \
            "pip install datajoint && python -c 'import datajoint as dj;print(dj.__version__)'"
  publish:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - py_ver: 3.9
            distro: alpine
          - py_ver: 3.8
            distro: alpine
          - py_ver: 3.7
            distro: alpine
          - py_ver: 3.6
            distro: alpine
          - py_ver: 3.9
            distro: debian
          - py_ver: 3.8
            distro: debian
          - py_ver: 3.7
            distro: debian
          - py_ver: 3.6
            distro: debian
    env:
      PY_VER: ${{matrix.py_ver}}
      DISTRO: ${{matrix.distro}}
      DOCKER_USERNAME: ${{secrets.docker_username}}
      DOCKER_PASSWORD: ${{secrets.docker_password}}
    steps:
      - name: Fetch image artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{format('py{1}-{2}', matrix.py_ver, matrix.distro)}}
      - name: Publish image
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker load < "py${PY_VER}-${DISTRO}.tar.gz"
          IMAGE=$(docker images --filter "reference=datajoint/*" --format "{{.Repository}}")
          TAG=$(docker images --filter "reference=datajoint/*" --format "{{.Tag}}")
          docker push "${IMAGE}:${TAG}"
          docker tag "${IMAGE}:${TAG}" "${IMAGE}:${TAG}-${GITHUB_SHA:0:7}"
          docker push "${IMAGE}:${TAG}-${GITHUB_SHA:0:7}"
          [ "$PY_VER" == "3.9" ] && [ "$DISTRO" == "debian" ] \
                  && docker tag "${IMAGE}:${TAG}" "${IMAGE}:latest" \
                  && docker push "${IMAGE}:latest" \
              || echo "skipping 'latest' tag..."
  publish-docs:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Build docs
        uses: ammaraskar/sphinx-action@master
        with:
          docs-folder: "docs/"
      # - name: Upload docs artifact
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: docs-html
      #     path: docs/_build/html/
      #     retention-days: 1
      - name: Commit documentation changes
        run: |
          git clone https://github.com/${GITHUB_REPOSITORY}.git \
              --branch gh-pages --single-branch gh-pages
          rm -R gh-pages/*
          cp -r docs/_build/html/* gh-pages/
          cp .gitignore gh-pages/
          touch gh-pages/.nojekyll
          cd gh-pages
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add . --all
          git commit -m "Update documentation" -a || true
          # The above command will fail if no changes were present, so we ignore
          # the return code.
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          branch: gh-pages
          directory: gh-pages
          github_token: ${{secrets.GITHUB_TOKEN}}